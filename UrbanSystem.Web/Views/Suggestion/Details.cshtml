@model UrbanSystem.Web.ViewModels.Suggestions.SuggestionIndexViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Model.Title - Details</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        .attachment-image {
            max-width: 100%; /* Responsive */
            height: auto; /* Maintain aspect ratio */
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="card shadow-sm">
            <div class="card-body">
                <h2 class="card-title">@Model.Title</h2>
                <h5 class="card-subtitle mb-2 text-muted">Category: @Model.Category</h5>
                <p class="card-text">Description: @Model.Description</p>

                @if (!string.IsNullOrEmpty(Model.AttachmentUrl))
                {
                    <div class="mb-3">
                        <p class="card-text">Attachment:</p>
                        <img src="@Model.AttachmentUrl" alt="Attachment Image" class="attachment-image" />
                    </div>
                }

                <p class="card-text">Uploaded On: @Model.UploadedOn</p>
                <p class="card-text">Status: @Model.Status</p>
                <p class="card-text">Upvotes: <span id="upvoteCount">@Model.Upvotes</span></p>
                <p class="card-text">Downvotes: <span id="downvoteCount">@Model.Downvotes</span></p>
                <p class="card-text">Priority: @Model.Priority</p>

                <!-- Upvote and Downvote Buttons -->
                <div class="mt-3">
                    <button class="btn btn-success" onclick="vote('up')">Upvote</button>
                    <button class="btn btn-danger" onclick="vote('down')">Downvote</button>
                </div>

                <a href="@Url.Action("All", "Suggestion")" class="btn btn-secondary mt-3">Back to List</a>
            </div>
        </div>
    </div>

    <script>
        async function vote(type) {
            const suggestionId = '@Model.Id'; // Pass the suggestion ID
            const response = await fetch(`/Suggestion/Vote`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id: suggestionId, type: type }),
            });

            if (response.ok) {
                const result = await response.json();
                document.getElementById('upvoteCount').innerText = result.upvotes;
                document.getElementById('downvoteCount').innerText = result.downvotes;
            } else {
                alert('Error processing vote. Please try again.');
            }
        }
    </script>
</body>
</html>
