@model UrbanSystem.Web.ViewModels.Suggestions.SuggestionIndexViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Model.Title - Details</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        /* Base Styling */
        body {
            background-color: #f0f2f5;
            color: #34495e;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .container {
            max-width: 750px;
            margin-top: 50px;
        }

        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 6px 18px rgba(0, 0, 0, 0.1);
            background-color: #ffffff;
            overflow: hidden;
        }

        .card-body {
            padding: 2.5rem 3rem;
        }

        /* Typography */
        .card-title {
            font-size: 2.2rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 1rem;
        }

        .card-subtitle {
            font-size: 1.2rem;
            color: #7f8c8d;
            margin-bottom: 1.5rem;
        }

        .section-label {
            font-weight: 600;
            color: #596275;
        }

        .card-text {
            font-size: 1rem;
            color: #636e72;
            line-height: 1.5;
            margin-bottom: 0.8rem;
        }

        /* Image Styling */
        .attachment-image {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            margin-top: 1rem;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        /* Button Styling */
        .btn-custom {
            padding: 0.6rem 1.5rem;
            border-radius: 30px;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-success {
            background-color: #1abc9c;
            border: none;
            color: #fff;
        }

            .btn-success:hover {
                background-color: #16a085;
            }

        .btn-danger {
            background-color: #e74c3c;
            border: none;
            color: #fff;
        }

            .btn-danger:hover {
                background-color: #c0392b;
            }

        .btn-secondary {
            background-color: #7f8c8d;
            border: none;
            color: #fff;
            font-size: 0.95rem;
            transition: background-color 0.2s ease;
        }

            .btn-secondary:hover {
                background-color: #626e74;
            }

        /* Subtle Animations */
        .btn-custom:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .card-body .card-text strong {
            color: #2c3e50;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">@Model.Title</h2>
                <h5 class="card-subtitle">Category: @Model.Category</h5>
                <p class="card-text">@Model.Description</p>

                @if (!string.IsNullOrEmpty(Model.AttachmentUrl))
                {
                    <div class="mb-4">
                        <p class="section-label">Attachment:</p>
                        <img src="@Model.AttachmentUrl" alt="Attachment Image" class="attachment-image" />
                    </div>
                }

                <div class="mb-4">
                    <p class="card-text"><strong>Uploaded On:</strong> @Model.UploadedOn</p>
                    <p class="card-text"><strong>Status:</strong> @Model.Status</p>
                    <p class="card-text"><strong>Upvotes:</strong> <span id="upvoteCount">@Model.Upvotes</span></p>
                    <p class="card-text"><strong>Downvotes:</strong> <span id="downvoteCount">@Model.Downvotes</span></p>
                    <p class="card-text"><strong>Priority:</strong> @Model.Priority</p>
                </div>

                <!-- Voting Buttons -->
                <div class="mt-4">
                    <button class="btn btn-success btn-custom mr-2" onclick="vote('up')">👍 Upvote</button>
                    <button class="btn btn-danger btn-custom" onclick="vote('down')">👎 Downvote</button>
                </div>

                <a href="@Url.Action("All", "Suggestion")" class="btn btn-secondary btn-custom mt-4">⬅️ Back to List</a>
            </div>
        </div>
    </div>

    <script>
        async function vote(type) {
            const suggestionId = '@Model.Id'; // Pass the suggestion ID
            try {
                const response = await fetch(`/Suggestion/Vote`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id: suggestionId, type: type }),
                });

                if (response.ok) {
                    const result = await response.json();
                    document.getElementById('upvoteCount').innerText = result.upvotes;
                    document.getElementById('downvoteCount').innerText = result.downvotes;
                } else {
                    alert('Error processing vote. Please try again.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Network error. Please try again.');
            }
        }
    </script>
</body>
</html>
